{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","books","setBooks","fetchData","a","axios","get","response","data","items","className","onClick","map","book","index","cleanedDate","volumeInfo","publishedDate","toString","authors","join","imageurl","imageLinks","thumbnail","key","title","src","alt","subtitle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sSAkIeA,MA5Hf,WAAe,IAAD,EACcC,mBAAS,MADvB,mBACHC,EADG,KACIC,EADJ,KAIJC,EAAS,uCAAG,4BAAAC,EAAA,sEACSC,IAAMC,IAFpB,sEACK,OACRC,EADQ,OAEdL,EAASK,EAASC,KAAKC,OAFT,2CAAH,qDAMf,OACI,oCACA,yBAAKC,UAAU,OACX,iDACA,oEAOA,6BACI,4BAAQA,UAAU,eACVC,QAASR,GADjB,eASJ,yBAAKO,UAAU,SACVT,GACGA,EAAMW,KAAI,SAACC,EAAMC,GACb,IAAMC,EAAcF,EAAKG,WAAWC,cAAcC,WAC5CC,EAAUN,EAAKG,WAAWG,QAASN,EAAKG,WAAWG,QAAQC,KAAK,MAAM,GACtEC,EAASR,EAAKG,WAAWM,WAAWC,UAE1C,OACI,yBAAKb,UAAU,OAAOc,IAAKV,GACvB,oCAAUA,EAAM,GAChB,4BAAKD,EAAKG,WAAWS,OACrB,6BAAK,6BAEL,yBAAKf,UAAU,WAGX,yBAAKA,UAAU,QAAQgB,IAAKL,EAAUM,IAAI,cAI1C,6BAAK,6BACL,2BAAG,2CAAH,KAA8BR,GAC9B,6BACA,2BAAG,mDAAH,KAAsCJ,GACtC,6BACA,2BAAG,0CAAH,KAA6BF,EAAKG,WAAWS,OAC7C,6BACA,2BAAG,6CAAH,KAAiCZ,EAAKG,WAAWY,SAAUf,EAAKG,WAAWY,SAAS,iBACpF,6BACA,6BACA,4BAAQlB,UAAU,qBAAlB,YACA,6BACA,sCCzDhBmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.22e38de0.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\n\nfunction App(){\n    const [books, setBooks]=useState(null);\n    \n    const apiurl='https://www.googleapis.com/books/v1/volumes?filter=free-ebooks&q=a';\n    const fetchData = async () =>{\n        const response = await axios.get(apiurl);\n        setBooks(response.data.items);\n    }\n\n\n    return(\n        <>\n        <div className=\"App\">\n            <h1>Open Book Library</h1>\n            <h2>Fetch a list of books and display it</h2>\n\n\n            {/* --------------------- */}\n            {/* |Fetch Data from API|*/}\n            {/* --------------------- */}\n\n            <div>\n                <button className=\"fetch-button\"\n                        onClick={fetchData}\n                >\n                 Fetch Data   \n                </button>\n            </div>\n\n\n            {/* Display data from API */}\n            <div className=\"books\">\n                {books && \n                    books.map((book, index)=>{\n                        const cleanedDate = book.volumeInfo.publishedDate.toString();\n                        const authors= (book.volumeInfo.authors)?book.volumeInfo.authors.join(\", \"):\"\";\n                        const imageurl=book.volumeInfo.imageLinks.thumbnail;\n\n                        return(\n                            <div className=\"book\" key={index}>\n                                <h3>Book {index+1}</h3>\n                                <h2>{book.volumeInfo.title}</h2>\n                                <br/><br/>\n\n                                <div className=\"details\">\n\n                                \n                                    <img className=\"image\" src={imageurl} alt=\"thumbnail\"/>\n                                    \n\n\n                                    <br/><br/>\n                                    <p><strong>Author:</strong>  {authors}</p>\n                                    <br/>\n                                    <p><strong>Published Date:</strong>  {cleanedDate}</p>\n                                    <br/>\n                                    <p><strong>Title:</strong>  {book.volumeInfo.title}</p>\n                                    <br/>\n                                    <p><strong>Subtitle:</strong>  {(book.volumeInfo.subtitle)?book.volumeInfo.subtitle:\"Not available\"}</p>\n                                    <br/>\n                                    <br/>\n                                    <button className=\"fetch-button more\">See More</button>\n                                    <br/>\n                                    <br/>\n                                    \n                                </div>\n                            </div>\n                        );\n                    })\n                }\n            </div>\n\n            \n\n        </div>\n\n\n        </>\n\n    );\n}\n\n// class App extends Component{\n//     constructor(props){\n//         super(props);\n//         this.state={\n//             items:[],\n//             isLoaded:false\n//         }\n//     }\n\n//     componentDidMount(){\n//         fetch('https://www.googleapis.com/books/v1/volumes?filter=free-ebooks&q=a')\n//             .then(res=>res.json())\n//             .then(res => {\n//                 this.setState({\n//                     isLoaded:true,\n//                     items:res.items, \n//                 })\n//             });\n//     }\n\n//     render(){\n//         var { isLoaded, items } = this.state;\n//         if(!isLoaded){\n//             return <div>Loading.....Please Wait!</div>\n//         }\n//         return(\n//             <>\n//                 <Heading/>\n//                 <Books/>\n//                 <ul>\n//                     {items.map(item=>(\n//                         <li key={item.id}>\n//                             {Object.entries(item)}\n//                         </li>\n//                     ))}\n//                 </ul>\n//             </>\n//         );\n//     }\n// }\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}