{"version":3,"sources":["Heading/Heading.js","showbook.js","Book/Book.js","Books/Books.js","App.js","serviceWorker.js","index.js"],"names":["Heading","fetchData","className","onClick","Showbook","index","book","cleanedDate","volumeInfo","publishedDate","toString","authors","join","imageurl","imageLinks","thumbnail","title","src","class","alt","id","subtitle","Book","path","component","Books","books","map","key","App","useState","setBooks","a","axios","get","response","data","items","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0VAqBeA,G,kBAhBC,SAAC,GAAe,IAAdC,EAAa,EAAbA,UACd,OACI,gCACI,wBAAIC,UAAU,eAAd,qBACA,oEACA,6BACI,4BAAQA,UAAU,8BACVC,QAASF,GADjB,mB,iCCoBDG,EAzBE,SAAC,GAAgB,EAAfC,MAAgB,IAATC,EAAQ,EAARA,KAChBC,EAAcD,EAAKE,WAAWC,cAAcC,WAC5CC,EAAUL,EAAKE,WAAWG,QAASL,EAAKE,WAAWG,QAAQC,KAAK,MAAM,GACtEC,EAASP,EAAKE,WAAWM,WAAWC,UAC1C,OAGI,yBAAKb,UAAU,wBACX,yBAAKA,UAAU,2BAA0B,4BAAKI,EAAKE,WAAWQ,QAC9D,yBAAKC,IAAKJ,EAAUK,MAAM,OAAOC,IAAI,cACrC,yBAAKjB,UAAU,0CACf,wBAAIA,UAAU,mBAAd,YAA0CI,EAAKc,IAC/C,uBAAGlB,UAAU,kBAAiB,2CAA9B,KAAyDS,GACzD,uBAAGT,UAAU,kBAAiB,mDAA9B,KAAiEK,GACjE,uBAAGL,UAAU,kBAAiB,0CAA9B,KAAwDI,EAAKE,WAAWQ,OACxE,uBAAGd,UAAU,kBAAiB,6CAA9B,KAA4DI,EAAKE,WAAWa,SAAUf,EAAKE,WAAWa,SAAS,oBCsB5GC,EAjCF,SAAC,GAAgB,EAAfjB,MAAgB,IAATC,EAAQ,EAARA,KACZC,EAAcD,EAAKE,WAAWC,cAAcC,WAC5CC,EAAUL,EAAKE,WAAWG,QAASL,EAAKE,WAAWG,QAAQC,KAAK,MAAM,GACtEC,EAASP,EAAKE,WAAWM,WAAWC,UAC1C,OAEI,kBAAC,IAAD,KACA,yBAAKb,UAAU,wBACX,yBAAKA,UAAU,2BAA0B,4BAAKI,EAAKE,WAAWQ,QAC9D,yBAAKC,IAAKJ,EAAUK,MAAM,OAAOC,IAAI,cACrC,yBAAKjB,UAAU,0CACf,wBAAIA,UAAU,mBAAd,YAA0CI,EAAKc,IAC/C,uBAAGlB,UAAU,kBAAiB,2CAA9B,KAAyDS,GACzD,uBAAGT,UAAU,kBAAiB,mDAA9B,KAAiEK,GACjE,uBAAGL,UAAU,kBAAiB,0CAA9B,KAAwDI,EAAKE,WAAWQ,OACxE,uBAAGd,UAAU,kBAAiB,6CAA9B,KAA4DI,EAAKE,WAAWa,SAAUf,EAAKE,WAAWa,SAAS,iBAE/G,4BACInB,UAAU,iCACVC,QAAS,WACJ,OAAO,kBAAC,IAAD,CAAOoB,KAAK,YAAYC,UAAWpB,MAHnD,gBCCGqB,G,MAnBD,SAAC,GAAW,IAAVC,EAAS,EAATA,MACZ,OACI,kBAAC,IAAD,KACI,yBAAKxB,UAAU,oBACVwB,GACGA,EAAMC,KAAI,SAACrB,EAAMD,GACb,OAEI,kBAAC,EAAD,CAAMuB,IAAKvB,EAAOC,KAAMA,WCerCuB,MAxBf,WAAe,IAAD,EACcC,mBAAS,MADvB,mBACHJ,EADG,KACIK,EADJ,KAIJ9B,EAAS,uCAAG,4BAAA+B,EAAA,sEACSC,IAAMC,IAFpB,sEACK,OACRC,EADQ,OAEdJ,EAASI,EAASC,KAAKC,OAFT,2CAAH,qDAMf,OAGI,yBAAKnC,UAAU,mBAEX,kBAAC,EAAD,CAASD,UAAWA,IAEpB,kBAAC,EAAD,CAAOyB,MAAOA,MCbNY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0104024d.chunk.js","sourcesContent":["import React from 'react';\nimport './Heading.css';\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\n\nconst Heading = ({fetchData})=>{\n    return(\n        <header>\n            <h1 className=\"font-header\">Open Book Library</h1>\n            <h2>Fetch a list of books and display it</h2>\n            <div>\n                <button className=\"btn btn-success btn-lg mb-5\"\n                        onClick={fetchData}\n                >\n                 Fetch Books   \n                </button>\n            </div>\n        </header>\n    );\n}\n\nexport default Heading;","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport Route from 'react-router-dom/Route';\n\n\nconst Showbook = ({index, book})=>{\n    const cleanedDate = book.volumeInfo.publishedDate.toString();\n    const authors= (book.volumeInfo.authors)?book.volumeInfo.authors.join(\", \"):\"\";\n    const imageurl=book.volumeInfo.imageLinks.thumbnail;\n    return(\n\n\n        <div className=\"card border-dark try\">\n            <div className=\"card-header font-header\"><h3>{book.volumeInfo.title}</h3></div>\n            <img src={imageurl} class=\"img \" alt=\"thumbnail\"/>\n            <div className=\"card-body text-dark d-flex flex-column\">\n            <h5 className=\"card-title font\">Book ID: {book.id}</h5>\n            <p className=\"card-text font\"><strong>Author:</strong>  {authors}</p>\n            <p className=\"card-text font\"><strong>Published Year:</strong>  {cleanedDate}</p>\n            <p className=\"card-text font\"><strong>Title:</strong>  {book.volumeInfo.title}</p>\n            <p className=\"card-text font\"><strong>Subtitle:</strong>  {(book.volumeInfo.subtitle)?book.volumeInfo.subtitle:\"Not available\"}</p>\n            \n           \n            \n            </div>\n        </div>\n    \n    );\n}\n\nexport default Showbook;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Book.css';\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport Route from 'react-router-dom/Route';\nimport Showbook from '../showbook';\nimport Heading from '../Heading/Heading';\n\n\nconst Book = ({index, book})=>{\n    const cleanedDate = book.volumeInfo.publishedDate.toString();\n    const authors= (book.volumeInfo.authors)?book.volumeInfo.authors.join(\", \"):\"\";\n    const imageurl=book.volumeInfo.imageLinks.thumbnail;\n    return(\n\n        <Router>\n        <div className=\"card border-dark try\">\n            <div className=\"card-header font-header\"><h3>{book.volumeInfo.title}</h3></div>\n            <img src={imageurl} class=\"img \" alt=\"thumbnail\"/>\n            <div className=\"card-body text-dark d-flex flex-column\">\n            <h5 className=\"card-title font\">Book ID: {book.id}</h5>\n            <p className=\"card-text font\"><strong>Author:</strong>  {authors}</p>\n            <p className=\"card-text font\"><strong>Published Year:</strong>  {cleanedDate}</p>\n            <p className=\"card-text font\"><strong>Title:</strong>  {book.volumeInfo.title}</p>\n            <p className=\"card-text font\"><strong>Subtitle:</strong>  {(book.volumeInfo.subtitle)?book.volumeInfo.subtitle:\"Not available\"}</p>\n            \n            <button \n                className=\"btn btn-primary btn-lg mt-auto\"\n                onClick={()=>{\n                     return <Route path=\"/bookinfo\" component={Showbook}/>\n                }}\n            >\n\n            See More</button>\n            \n            </div>\n        </div>\n        </Router>\n    \n    );\n}\n\nexport default Book;\n\n","import React from 'react';\nimport Book from '../Book/Book.js';\nimport './Books.css';\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport Route from 'react-router-dom/Route';\n\n\n\nconst Books = ({books})=>{\n    return(\n        <Router>\n            <div className=\"d-flex flex-wrap\">\n                {books && \n                    books.map((book, index)=>{\n                        return(\n                        \n                            <Book key={index} book={book} />  \n                            \n                            \n                        );\n                    })\n                }\n            </div>\n        </Router>\n    );\n}\n\nexport default Books;","import React, {useState} from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport Heading from './Heading/Heading';\nimport Books from './Books/Books';\n\n\nfunction App(){\n    const [books, setBooks]=useState(null);\n    \n    const apiurl='https://www.googleapis.com/books/v1/volumes?filter=free-ebooks&q=a';\n    const fetchData = async () =>{\n        const response = await axios.get(apiurl);\n        setBooks(response.data.items);\n    }\n\n\n    return(\n        \n    // <Router>\n        <div className=\"App text-center\">\n\n            <Heading fetchData={fetchData}/>\n\n            <Books books={books}/>\n\n        </div>\n    // </Router>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}