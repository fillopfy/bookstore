{"version":3,"sources":["Heading/Heading.js","Book/Book.js","Books/Books.js","App.js","serviceWorker.js","index.js"],"names":["Heading","className","Book","src","alt","Books","App","props","state","items","isLoaded","fetch","then","res","json","setState","this","map","item","key","id","volumeInfo","title","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uSAkBeA,G,MAfC,WACZ,OACI,gCACI,yBAAKC,UAAU,eAEf,uBAAGA,UAAU,sBAGb,yBAAKA,UAAU,eACf,oDCDGC,G,MARF,WACT,OACI,yBAAKD,UAAU,QAAQE,IAAI,kHAAkHC,IAAI,WC+B1IC,G,MA/BD,WACV,OACI,yBAAKJ,UAAU,SACX,yBAAKA,UAAU,OACX,kBAAC,EAAD,CAAMA,UAAU,SAChB,kBAAC,EAAD,CAAMA,UAAU,SAChB,kBAAC,EAAD,CAAMA,UAAU,UAIpB,yBAAKA,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAGJ,yBAAKA,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAGJ,yBAAKA,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,UCgBDK,E,kDAzCX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAM,CACPC,MAAM,GACNC,UAAS,GAJC,E,gEAQE,IAAD,OACfC,MAAM,sEACDC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAC,GACF,EAAKE,SAAS,CACVL,UAAS,EACTD,MAAMI,EAAIJ,a,+BAKjB,IAAD,EACsBO,KAAKR,MAAzBE,EADF,EACEA,SAAUD,EADZ,EACYA,MAChB,OAAIC,EAIA,oCACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,4BACKD,EAAMQ,KAAI,SAAAC,GAAI,OACX,wBAAIC,IAAKD,EAAKE,IACTF,EAAKG,WAAWC,YAT1B,6D,GAvBDC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9b044aad.chunk.js","sourcesContent":["import React from 'react';\nimport './Heading.css';\n\nconst Heading = ()=>{\n    return(\n        <header>\n            <div className=\"header-part\">\n            \n            <i className=\"fa fa-book fa-2x\"></i>\n            </div>\n            \n            <div className=\"header-part\">\n            <h1>Open Boook Store</h1>\n            </div>\n        </header>\n    );\n}\n\nexport default Heading;","import React from 'react';\nimport './Book.css';\n\nconst Book = ()=>{\n    return(\n        <img className=\"image\" src=\"http://books.google.com/books/content?id=MTZAAAAAYAAJ&printsec=frontcover&img=1&zoom=1&edge=curl&source=gbs_api\" alt=\"book\"/>\n\n\n    );\n}\n\nexport default Book;","import React from 'react';\nimport Book from '../Book/Book.js';\nimport './Books.css';\n\n\nconst Books = ()=>{\n    return(\n        <div className=\"whole\">\n            <div className=\"row\">\n                <Book className=\"book\"/>\n                <Book className=\"book\"/>\n                <Book className=\"book\"/>\n                {/* <Book/> */}\n            </div>\n\n            <div className=\"row\">\n                <Book/>\n                <Book/>\n                <Book/>\n            </div>\n\n            <div className=\"row\">\n                <Book/>\n                <Book/>\n                <Book/>\n            </div>\n\n            <div className=\"row\">\n                <Book/>\n                <Book/>\n                <Book/>\n            </div>\n        </div>\n    );\n}\n\nexport default Books;","import React, {Component} from 'react';\nimport Heading from './Heading/Heading.js';\nimport Books from './Books/Books.js';\n\nclass App extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            items:[],\n            isLoaded:false\n        }\n    }\n\n    componentDidMount(){\n        fetch('https://www.googleapis.com/books/v1/volumes?filter=free-ebooks&q=a')\n            .then(res=>res.json())\n            .then(res => {\n                this.setState({\n                    isLoaded:true,\n                    items:res.items, \n                })\n            });\n    }\n\n    render(){\n        var { isLoaded, items } = this.state;\n        if(!isLoaded){\n            return <div>Loading.....Please Wait!</div>\n        }\n        return(\n            <>\n                <Heading/>\n                <Books/>\n                <ul>\n                    {items.map(item=>(\n                        <li key={item.id}>\n                            {item.volumeInfo.title}\n                        </li>\n                    ))}\n                </ul>\n            </>\n        );\n    }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}